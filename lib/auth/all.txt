import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: 'Flutter Demo',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        home: RegisterPage());
  }
}

class RegisterPage extends StatefulWidget {
  final String title = 'test';
  @override
  State<StatefulWidget> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  bool _success;
  String _userEmail = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(widget.title),
        ),
        body: Column(
          children: [
            // Text("asd"),

            ElevatedButton(
                onPressed: () async {
                  // print("asd");
                  final FirebaseDatabase db = FirebaseDatabase.instance;
                  //adding - When created
                  // db.reference().child("code").child('iop').update({
                  //   'code': 'iop',
                  //   'uid': 'asdsd',
                  //   'used': 0,
                  // });

                  //chcecking
                  var code = 'iop';
                  try {
                    await db
                        .reference()
                        .child("code")
                        .child(code)
                        .once()
                        .then((DataSnapshot dataSnapshot) async {
                      if (dataSnapshot.value != null) {
                        //limiting
                        if (dataSnapshot.value['used'] < 10) {
                          //getting first user data
                          var odata;
                          await db
                              .reference()
                              .child("user")
                              .child(dataSnapshot.value['uid'])
                              .once()
                              .then((DataSnapshot dataSnapshot) {
                            odata = dataSnapshot.value;
                          });
                          //updating first user data
                          db
                              .reference()
                              .child("user")
                              .child(dataSnapshot.value['uid'])
                              .update({
                            'm': odata['m'] + 1,
                          });
                          //updating used of FUser
                          db.reference().child("code").child(code).update({
                            'used': dataSnapshot.value['used'] + 1,
                          });
                        } else {
                          print("used all");
                        }
                      } else {
                        print('not found');
                      }
                    });
                  } catch (e) {
                    print(e);
                  }
                },
                child: Text("ok")),
          ],
        )

        //REGISTERS
        //  Form(
        //     key: _formKey,
        //     child: Card(
        //       child: Padding(
        //         padding: const EdgeInsets.all(16),
        //         child: Column(
        //           crossAxisAlignment: CrossAxisAlignment.start,
        //           children: <Widget>[
        //             TextFormField(
        //               controller: _emailController,
        //               decoration: const InputDecoration(labelText: 'Email'),
        //               validator: (String value) {
        //                 if (value.isEmpty) {
        //                   return 'Please enter some text';
        //                 }
        //                 // else if(value.){

        //                 //   return 'Please enter some text';

        //                 // }
        //                 return null;
        //               },
        //             ),
        //             TextFormField(
        //               controller: _passwordController,
        //               decoration: const InputDecoration(labelText: 'Password'),
        //               validator: (String value) {
        //                 if (value.isEmpty) {
        //                   return 'Please enter some text';
        //                 }
        //                 return null;
        //               },
        //               obscureText: true,
        //             ),
        //             GestureDetector(
        //               onTap: () async {
        //                 if (_formKey.currentState.validate()) {
        //                   await _register();
        //                 }
        //               },
        //               child: Container(
        //                 color: Colors.black54,
        //                 height: 50,
        //                 width: 250,

        //                 padding: const EdgeInsets.symmetric(vertical: 16),
        //                 alignment: Alignment.center,

        //                 // child: SignInButtonBuilder(
        //                 //   icon: Icons.person_add,
        //                 //   backgroundColor: Colors.blueGrey,
        //                 //   onPressed: () async {
        //                 //     if (_formKey.currentState.validate()) {
        //                 //       await _register();
        //                 //     }
        //                 //   },
        //                 //   text: 'Register',
        //                 // ),
        //               ),
        //             ),
        //             Container(
        //               alignment: Alignment.center,
        //               child: Text(_success == null
        //                   ? ''
        //                   : (_success
        //                       ? 'Successfully registered $_userEmail'
        //                       : 'Registration failed')),
        //             )
        //           ],
        //         ),
        //       ),
        //     )),
        );
  }

  @override
  void dispose() {
    // Clean up the controller when the Widget is disposed
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  // Example code for registration.
  Future<void> _register() async {
    final User user = (await _auth.createUserWithEmailAndPassword(
      email: _emailController.text,
      password: _passwordController.text,
    ))
        .user;
    if (user != null) {
      final FirebaseDatabase db = FirebaseDatabase.instance;
      db.reference().child("user").child(_auth.currentUser.uid).update({
        'uid': _auth.currentUser.uid,
        'email': _emailController.text,
        'password': _passwordController.text,
        'a': '40'
      });

      db.reference().child("user").child(_auth.currentUser.uid).update({
        'uid': _auth.currentUser.uid,
        'code': _emailController.text
            .substring(0, _emailController.text.indexOf('@'))
      });

      setState(() {
        _success = true;
        _userEmail = user.email;
      });
    } else {
      _success = false;
    }
  }
}
